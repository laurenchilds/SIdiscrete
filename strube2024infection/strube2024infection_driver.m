function strube2023infection_driver
%==========================================================================
%% CODE DESCRIPTION
%==========================================================================
%   This script is the driver of the strube2024infection code set. It is
%   provided for the purpose of reproducing simulations and figures
%   presented in:
%
%       LF Strube, S Elgart, and LM Childs. Infection induced increases
%       to population size during cycles in a discrete-time epidemic model. 
%       Journal of Mathematical Biology. Vol:Article (2024). 
%
%   This script presents the user with 4 options via the command line
%   prompts
%
%       (1) To generate manuscript figures from stored simulation data
%
%       (2) To generate manuscript figures by resimulating the underlying 
%           data using stored parameter values.
%
%       (3) To perform custom simulations/figure generation with 
%           user-provided model parameters and simulation conditions.
%
%           [IMPORTANT: This option stores data files to the directory 
%           "strube2024infection_NewData" within the directory containing
%           this script.]
%
%       (4) To perform custom simulations/figure generation with perviously
%           stored user-provided model parameters and simulation conditions. 
%
%           This option may also be used to generate additional
%           (non-manuscript) figure types from the stored manuscript data. 
%
%   Additionally, for choice (3) the user may elect to input run and figure
%   specifications via 
%
%               newrunspecification_noprompt.m
%               figurespecifications_noprompt.m
%
%   and in doing so avoid the command-line prompts. 
%
%   This script also includes the option of storing the generated figures 
%   using hard coded filenames which include the figure generation date and 
%   a short descriptor. However, as the quantity of figures generated by 
%   this script can be significant, this portion of the script is commented
%   out. Users interested in this functionality may uncomment
%
%                       "(07) STORE FIGURES"  
%
%   at the bottom of this script. 
%
%
%               Copyright (C) 2024 by Laura F. Strube
%
%   This program is free software: you can redistribute it and/or modify 
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or 
%   (at your option) any later version.
%
%   This program is distributed in the hope that it will be useful, but 
%   WITHOUT ANY WARRANTY; without even the implied warranty of 
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
%   General Public License for more details.
%
%    You should have received a copy of the GNU General Public License 
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.
%
%
%   QUESTIONS about the strube2024infection code set? 
%               Email Laura Strube at LFStrube@gmail.com
%
%% ------------------------------------------------------------------------
%==========================================================================
%% START CODE
%==========================================================================

addpath('Codes')
%==========================================================================
%% (01) USER PROMPT: REPRODUCE DATA AND FIGURES OR GENERATE NEW DATA
%==========================================================================

% Users specifying custom run conditions must confirm permission to store
% run conditions as a .mat file to escape the "continuescript" while loop.
continuescript=0; 

while continuescript==0

%(A) USER PROMPT
    fprintf('\nYou have two options:\n')
    fprintf('(1) Reproduce manuscript data and/or figures from manuscript\n')
    fprintf('(2) Generate original data and figures\n')
    manuscriptreproduction=input("Enter your selection here >");

    if manuscriptreproduction == 1 % Reproduce data and/or figures
        %(B) 0PTION 01: USE MANUSCRIPT DATA 
            
            %(I) User Prompt: Select desired figure

                fprintf('\nYou have the following figure options:\n')
                fprintf('(01) Figure 1b \n')
                fprintf('(02) Figure 2a \n')
                fprintf('(03) Figure 2b left \n')
                fprintf('(04) Figure 2b right \n')
                fprintf('(05) Figure 2c left \n')
                fprintf('(06) Figure 2c right \n')
                fprintf('(07) Figure 2d left \n')
                fprintf('(08) Figure 2d right \n')
                fprintf('(09) Figure 2e left \n')
                fprintf('(10) Figure 2e right \n')
                fprintf('(11) Figure 3a \n')
                fprintf('(12) Figure 3b \n')
                fprintf('(13) Figure 4a \n')
                fprintf('(14) Figure 4b \n')
                fprintf('(15) Figure 5 top \n')
                fprintf('(16) Figure 5 middle \n')
                fprintf('(17) Figure 5 bottom \n')
                fprintf('(18) Figure 6a \n')
                fprintf('(19) Figure 6b \n')
                fprintf('(20) Figure 6c \n')
                fprintf('(21) Figure 6d \n')
                fprintf('(22) Figure 7a \n')
                fprintf('(23) Figure 7b \n')
                fprintf('(24) Figure 7c \n')
                fprintf('(25) Figure 7d \n')
                fprintf('(26) Figure 8a \n')
                fprintf('(27) Figure 8b \n')
                fprintf('(28) Figure 8c \n')
                fprintf('(29) Figure 8d \n')
                fprintf('(30) Figure C01 top \n')
                fprintf('(31) Figure C01 middle \n')
                fprintf('(32) Figure C01 bottom \n')
                fprintf('(33) Figure C02a \n')
                fprintf('(34) Figure C02b \n ')
    
                figchoice=input('Enter your choice > ');
                reproducefile=filepaths(figchoice);

                if figchoice==13 || figchoice==14
                    batchpath=reproducefile; %#ok<*LOAD> %remove quote symbols %#ok<LOAD> 
                else
                    reproducefile=filepaths(figchoice);
                end
    
            %(II) Option 01b: User Prompt: Use Stored Data or Simulate?
                fprintf('\n\n You have two options:')
                fprintf('\n(1) Generate figures from stored data;')
                fprintf('\n(2) Simulate data and figures from stored parameters and run conditions;')
                figurereproduction=input('\nEnter your choice > ');

                if figurereproduction==2 && figchoice==28
                    fprintf('This option generates the case (S0,I0)=(180,20)')
                    fprintf('Generate the case (S0,I0)=(60,20), by generating Figure 02e right.')
                end
                
    elseif  manuscriptreproduction ==2 
        %(B) OPTION 02: GENERATE ORIGINAL DATA AND FIGURES
        % To do: Notify user that files constructed in batch runs may not
        % contain the data necessary to run figures from stored data

            %(I) User Prompt: Use Stored Data or Simulate
            fprintf('\nYou have three options:\n')
            fprintf('(1) Generate figures from previously stored data;\n')
            fprintf('(2) Generate new data and figures\n')

                figurenew=input("Enter your selection here >");
    
            % Generate figures from previously stored data
            if figurenew==1

                datatype=input("Is this data a batch file? [File name begins with ''Batch''] (Y=1/N=0) >");

                if datatype ==1 
                    fprintf('\nPlease enter the full name of the .mat file that contains the batch data you would like to use in quotes.\n')
                    batchpath=input('(Tip: shift+right-click to copy file path) > ','s');
                    batchpath=batchpath(2:end-1); %#ok<*LOAD> %remove quote symbols %#ok<LOAD> 
                else
                    fprintf('\nPlease enter the full name of the .mat file that contains the simulation data you would like to use in quotes.\n')
                    reproducefile=input('(Tip: shift+right-click to copy file path) > ','s');
                    reproducefile=reproducefile(2:end-1); %#ok<*LOAD> %remove quote symbols %#ok<LOAD> 
    
                    %Prompt for figure generation
                    figspecsentry=1;
                end

            % User prompt: Specify run conditions
            elseif figurenew==2

                fprintf('\n\nYou have three choices.:\n')
                fprintf('(1) Be prompted to enter your desired simulation conditions for a batch run\n')
                fprintf('(2) Be prompted to enter your desired simulation conditions for a single run \n')
                fprintf('(3) Load desired (single run) simulations conditions via the file: newrunspecification_noprompt.m \n')
                runspecsentry=input("Which option would you prefer? >");
                
                % Collect user-specfied batch run conditions
                if runspecsentry==1

                    %load appropriate script (automatically stores batch
                    %run specifications)
                    batchpath=batchinputs_create; 

                    % Do not prompt for figure generation below
                    figspecsentry=0;

                % Collect user-specified single run conditions
                elseif runspecsentry==2

                    %load appropriate script
                    newrunspecification_prompt;

                    %Prompt for figure generation below
                    figspecsentry=1;

                elseif runspecsentry==3
                    %load appropriate script
                    newrunspecification_noprompt;

                    fprintf('\n\nAfter the simulations, you have two options:\n')
                    fprintf('(1) Be prompted to enter your desired figure specifications \n')
                    fprintf('(2) Load desired figure specifications via the file: figurespecifications_noprompt.m \n')

                    figspecsentry=input("Which option would you prefer? (1 or 2) >");

                end
                
            end % "newchoice" statement

    end % "runchoice" statement
    

    %(E) PROMPT USER: CONFIRM CREATION OF DATA TO BE STORED
   
        % Prompt for all choices that involve simulation of new data
        if (manuscriptreproduction==1 && figurereproduction==2) || (manuscriptreproduction==2 && figurenew==2)
            fprintf('\n\nYou chose to run new simulations. \n')
            fprintf('This will result in the storage of data files to the directory containing this script \n')
            fprintf('[Est: 0.001 MB per pair of bifurcation parameter values.]\n')
            promptchoice=input("Do you wish to proceed? Y=1/N=0  >");
        
            if promptchoice==1
                continuescript = 1;
            else
                continuescript = 0;
            end
        end
        
        % Do not prompt for choices that involve use of stored data
        if (manuscriptreproduction==1 && figurereproduction==1) || (manuscriptreproduction==2 && figurenew==1)
            continuescript=1;
        end

end % end "continuescript" while loop

%==========================================================================
%% STORE USER SPECIFICATIONS
%==========================================================================

% If user requested brand new single-run simulations, store run specifications
if (manuscriptreproduction==2 && figurenew==2 && runspecsentry ~=1)

    % Create a file name
    filename=fullfile(...
        'strube2024infection_NewData',...
        sprintf('%s_strube2024infection',date));
                
    % Script to create ReproductionInputs
    reproductioninputs_create

    % Store ReproductionInputs;
    storagepath=reproductioninputs_storage(ReproductionInputs);

    % Retain ReproductionInputs filepath
    reproducefile=ReproductionInputs.RunName;

end

%==========================================================================
%% CLEAR UNNECESSARY VARIABLES
%==========================================================================

clearvars -except continuescript manuscriptreproduction figchoice figurereproduction figurenew datatype runspecsentry batchpath figspecsentry reproducefile

%==========================================================================
%% USER PROMPT: PARALLELIZE SIMULATIONS?
%==========================================================================

    if (manuscriptreproduction==1 && figurereproduction==2) || (manuscriptreproduction==2 && figurenew==2)
    %(D) USER PROMPT: RUN SIMULATIONS IN PARALLEL? 
        parallelize=input('\n\nWould you like to use parallel processing (Strongly recommended, requires the Parallel Computing Toolbox) Y=1/N=0 >');
        workercount=0;
        if parallelize==1
            fprintf('To view the quantity of cores available on your machine, escape this code a type:  \n')
            fprintf('''evalc(''feature(''numcores'')'') in the command line.\n\n')
            workercount=input('How many workers would you like to use?> ');
            fprintf('\n Note: MATLAB will open the parallel pool with the maximum number of workers available on your machine.')
            fprintf('\n However, it will only utilize the quantity you specified above.')
        end
    end

%==========================================================================
%% LOAD CALLED FUNCTIONS 
%==========================================================================

%(A) TRAJECTORY SIMULATOR
    ts=@trajectorysimulator;

%(B) DATA GENERATOR
    dg=@datagenerator;

%(C) AVERAGE DATA PROCESSOR
    apc=@averagepopulationcalculator;

%(D) HEATMAP DATA PROCESSOR
    csa=@cyclesizeanalyzer;

%(E) HYDRA EFFECT DATA PROCESSOR
    ch=@calculatehydra;

%(F) TRAJECTORY FIGURE GENERATOR

%(G) ORBIT PLOT FIGURE GENERATOR
    op=@orbitplot;
    
%(H) AVERAGE POPULATION SIZE FIGURE GENERATOR
    avgplot=@averagepopulationplot;

%(I) HEATMAP FIGURE GENERATOR
    hmp=@heatmapplot;

%(J) HYDRA EFFECT FIGURE GENERATOR
    hep=@hydraeffectplot;

%(G) DATA STORAGE
    ds=@datastorage.m;

%==========================================================================
%% LOAD BATCH RUN SPECS/DATA
%==========================================================================

% Load Run Specifications File
if (manuscriptreproduction==2 && figurenew==1 && datatype==1) ||...
        (manuscriptreproduction==2 && figurenew==2 && runspecsentry==1)||... 
        (manuscriptreproduction==1 && figchoice==13) || ...
        (manuscriptreproduction==1 && figchoice==14)

    filepath=split(batchpath,{'/','\'});
    load(fullfile(filepath{:}));
end

%==========================================================================
%% GENERATE BATCH RUN DATA
%==========================================================================
%Generate Data
if (manuscriptreproduction== 2 && figurenew==2 && runspecsentry == 1) ||...
        (manuscriptreproduction==1 && figurereproduction==2 && figchoice==13) || ...
        (manuscriptreproduction==1 && figurereproduction==2 && figchoice==14)

    for i=1:1:length(B)

        % Collect the Current Time of the Individual Simulation
            %Format: 'yyyymmddTHHMMSS' Ex: 20170224T121533
            currenttime = datestr(clock,30); 
            
        % Format CurrentTime into a Useable File Format
            %For file names: 
            date = [currenttime(1:4),'_',currenttime(5:6),'_',...
                currenttime(7:8),'_',currenttime(10:11),'_',...
                currenttime(12:13),'_',currenttime(14:15),'_00'];
            
            %For figure titles
            latexdate =strcat([currenttime(1:4),'\_',currenttime(5:6),'\_',....
                currenttime(7:8),'\_',currenttime(10:11),'\_',...
                currenttime(12:13),'\_',currenttime(14:15)],'\_00');

                
        % Create a File Name for the Individual Simulation
            filename=fullfile(...
                'strube2024infection_NewData',...
                sprintf('%s_strube2024infection_%.0f_%.0f_B',date,i,length(B)));

        % Store Values to the Batch Data Structure
            B(i).ReproductionInputs.RunName=filename;
            B(i).ReproductionInputs.RunDate=date;
            B(i).ReproductionInputs.LatexRunDate=latexdate;

        % Extract Reproduction Inputs from the Batch Data Structure
            ReproductionInputs=B(i).ReproductionInputs;

            reproductioninputs_extract

        % Store the Reproduction Inputs to allow for generation of figures
        % using stored simulation conditions with this script. 

            reproductioninputs_storage(ReproductionInputs);

        fprintf('\n\n RUNNING SIMULATION: %.0f of %.0f \n', i, length(B))

        %Simulate and Collect Long-Time and Average Trajectory Data
        [S,I,T,S_DF,Savg,Iavg,Tavg,SDFavg]=dg(x,p,timetoequil,timeatequil,avgtime,bifpar1,bifpar2,bp1i,bp2i,sz1,sz2,parallelize,workercount);
    
        %Process Data for Heat Maps
        [HS,HI,HT,HSDF]=csa(S,I,T,S_DF,sz1,sz2,accuracy,lc);

        %Process Data for Hydra Effect Plots
        binaryhydrathreshold=0;  
        [~,~,BinaryHydra]=...
                calculatehydra(Tavg,SDFavg,binaryhydrathreshold);

        % Write Simulation Data to the Batch File
        B(i).S=[];          % Todo: Consider making storage of orbit data
        B(i).I=[];          % An option at a later date. Significant 
        B(i).T=[];          % warning is required for this option as it 
        B(i).S_DF=[];       % could overwhelm the capacity of a hard drive
        B(i).Savg=Savg;     % if multiple large batches are created.
        B(i).Iavg=Iavg;
        B(i).Tavg=Tavg;
        B(i).SDFavg=SDFavg;
        B(i).HS=HS;
        B(i).HI=HI;
        B(i).HT=HT;
        B(i).HSDF=HSDF;
        B(i).BinaryHydra=BinaryHydra;
    end

    % Store Batch Run Specs and Data
    filepath=split(batchpath,{'/','\'});
    save(fullfile(filepath{:}),'B');
end
%==========================================================================
%% GENERATE BATCH RUN FIGURES
%==========================================================================
if (manuscriptreproduction==1 && figchoice==13)||...
        (manuscriptreproduction==1 && figchoice==14)

    figuregenerator_manuscript

elseif (manuscriptreproduction==2 && figurenew==1 && datatype==1) ||...
        (manuscriptreproduction==2 && figurenew==2 && runspecsentry==1)
        %(manuscriptreproduction==1 && figchoice==13)||...
        %(manuscriptreproduction==1 && figchoice==14)

        % Extract Run Conditions
        ReproductionInputs=B(1).ReproductionInputs;
        reproductioninputs_extract

        %Default axis label formatting
        bp1label=sprintf('%s',bp1);
        bp2label=sprintf('%s',bp2);
    
        %Overwrite default and convert to a symbol if the parameter is a greek letter
        if bifpar1 == 5 || bifpar1 == 6
            bp1label= sprintf('$\\%s$',bp1);
            bp2label=sprintf('$%s$',bp2);
        end
        
        if bifpar2 == 5 || bifpar2 == 6
            bp1label=sprintf('$%s$',bp1);
            bp2label= sprintf('$\\%s$',bp2);
        end

        %Initialize Array
        HHydra=zeros(size(B(1).Tavg));

        for i=1:1:length(B)
            IndividualHydra=B(i).BinaryHydra;
            [hydra_m,hydra_n]=size(IndividualHydra);
            for j=1:1:hydra_m
                for k=1:1:hydra_n
                    if IndividualHydra(j,k)==1
                        HHydra(j,k)=1;
                    end
                end
            end
        end

    colorbarlabel='Hydra Effect';
    figuretitle={B(i).LatexBatchDate, 'Net Hydra Effect Across the Range of Sampled Parameters'};
    figurecounter=0;
    [figurehandle,figurecounter]=hydraeffectplot('BinaryHydra',HHydra,bifpar1,bifpar2,'none',...
        increm1,increm2,bp1label,bp2label,colorbarlabel,figuretitle,...
        figurecounter);
    FigHandles{figurecounter}=figurehandle;

else % not a batch run 
%==========================================================================
%% LOAD DATA FILE AND EXTRACT SIMULATION SPECIFICATIONS
%==========================================================================

    filepath=split(reproducefile,{'/','\'});
    load(fullfile(filepath{:}));
    ReproductionInputs=D.ReproductionInputs; %#ok<NODEF> 

    reproductioninputs_extract

%==========================================================================
%% EXTRACT STORED DATA OR GENERATE NEW DATA
%==========================================================================

%Extract stored data
if (manuscriptreproduction==1 && figurereproduction==1) || (manuscriptreproduction==2 && figurenew==1)


    if ~isfield(D,'Orbit_SDataArray')
        fprintf('\n\nThis data file was constructed during a batch run simulation.')
        fprintf('\nIt does not contain simulation data')
        fprintf('\nTo generate figures, escape the script and manually enter the desired run conditions')
        fprintf('By selecting the ''Generate New Data and Figures''')

        fprintf('\n\nEscape the code now by entering Ctl-C')
        pause

    else

     %Extract Long-Time Behavior Data
     S=D.Orbit_SDataArray;
     I=D.Orbit_IDataArray;
     T=S+I;
     S_DF=D.Orbit_DFDataArray;

     %Extract Heat Map Data
     HS=D.Heat_SDataArray;
     HI=D.Heat_IDataArray;
     HT=D.Heat_TDataArray;
     HSDF=D.Heat_DFDataArray;

     %Extract Average Data
     Savg=D.Average_SDataArray;
     Iavg=D.Average_IDataArray;
     Tavg=D.Average_TDataArray;
     SDFavg=D.Average_DFDataArray;

    end
% Simulate new data 
elseif (manuscriptreproduction==1 && figurereproduction==2) || (manuscriptreproduction==2 && figurenew==2)
    %Run conditions are set when the following scripts are loaded above:
        % dataextraction:
        %   Used when the option to generates manuscript data or figures 
        %   from stored run conditions is selected.
        % newrunspecification: 
        %   Used when the option to generate new data and figures from user
        %   inputted run conditions is selected

    fprintf('\n\n RUNNING SIMULATIONS\n')

    %Simulate and Collect Long-Time and Average Trajectory Data
    [S,I,T,S_DF,Savg,Iavg,Tavg,SDFavg]=dg(x,p,timetoequil,timeatequil,avgtime,bifpar1,bifpar2,bp1i,bp2i,sz1,sz2,parallelize,workercount);

    %Process Data for Heat Maps
    [HS,HI,HT,HSDF]=csa(S,I,T,S_DF,sz1,sz2,accuracy,lc);

    %Collect Data into a single data structure for ease of storage
    SimulationData.S=S;
    SimulationData.I=I;
    SimulationData.T=T;
    SimulationData.S_DF=S_DF;
    SimulationData.Savg=Savg;
    SimulationData.Iavg=Iavg;
    SimulationData.Tavg=Tavg;
    SimulationData.SDFavg=SDFavg;
    SimulationData.HS=HS;
    SimulationData.HI=HI;
    SimulationData.HT=HT;
    SimulationData.HSDF=HSDF;
end

%==========================================================================
%% (05) STORE DATA
%==========================================================================

% If user requested new simulations, store run specifications and data

if (manuscriptreproduction==1 && figurereproduction==2) || (manuscriptreproduction==2 && figurenew==2)
    
    % Store Data
    datastorage(ReproductionInputs,SimulationData);

end

%==========================================================================
%% (06) CONSTRUCT BIFURCATION PARAMETER AXES LABLES
%==========================================================================

    %Default axis label formatting
    bp1label=sprintf('%s',bp1);
    bp2label=sprintf('%s',bp2);

    %Overwrite default and convert to a symbol if the parameter is a greek letter
    if bifpar1 == 5 || bifpar1 == 6
        bp1label= sprintf('$\\%s$',bp1);
        bp2label=sprintf('$%s$',bp2);
    end
    
    if bifpar2 == 5 || bifpar2 == 6
        bp1label=sprintf('$%s$',bp1);
        bp2label= sprintf('$\\%s$',bp2);
    end

%==========================================================================
%% (06a) GENERATE MANUSCRIPT FIGURES
%==========================================================================

if manuscriptreproduction == 1
    figuregenerator_manuscript
end

%==========================================================================
%% (06b) GENERATE USER-SPECIFIED FIGURES
%==========================================================================

if manuscriptreproduction == 2

    % Collect Figure Choices
    fprintf('\n\nThis script can produce 6 types of figures:\n')
    fprintf('-- Limit Cycle Size Heat Maps \n')
    fprintf('-- Average Population Heat Maps \n')
    fprintf('-- Single Initial-Condition Hydra Effect Plots \n')
    fprintf('-- Batch Initial condition [Binary] Hydra Effect Plot \n')
    fprintf('-- Orbit Maps \n')
    fprintf('-- Trajectory Plots\n\n')

    if figspecsentry==1

        figurespecifications_prompt

    elseif figspecsentry==2

        figurespecifications_noprompt

    end

    % Create Figures

    figuregenerator_userchoice
end
    
end

%==========================================================================
%% (07) STORE FIGURES
%==========================================================================
    % 
    % 
    % %-----Prompt-----% 
    % usercatch=0;
    % while usercatch==01
    %     storefigures=input('\n\nWould you like to store these figures? Y=1/N=0> ');
    %     if any([0,1]==generatefigures) 
    %         usercatch=1;
    %     else
    %         fprintf('Invalid entry. Please try again.\n')
    %     end
    % end
    % %---------------%
    % 
    % if storefigures==1
    %     figurestoragedirectory='strube2024infection_NewFigures';
    % 
    %     for i=1:1:figurecounter
    %         figurestorage(FigHandles{i},fullfile(figurestoragedirectory,FileNames{i}))
    %     end
    % end
end
%==========================================================================
%% (08) END CODE
%==========================================================================
